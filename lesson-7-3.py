# УРОК 7. ЗАДАНИЕ 3

"""
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы
перегрузки арифметических операторов:

сложение (__add__()),
вычитание (__sub__()),
умножение (__mul__()),
деление (__floordiv__()).

Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
(с округлением до целого) деление клеток, соответственно.

Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.

Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
количества ячеек этих двух клеток.

Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
*****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:

    def __init__(self, points: int):
        self.points = points

    def __add__(self, other):
        return Cell(self.points + other.points)

    def __sub__(self, other):
        if self.points - other.points > 0:
            return Cell(self.points - other.points)
        else:
            # Клетка не может быть образована, поэтому нужно ввернуть None
            # Возвращаемый результат обязательно обрабатывать!
            print("Нельзя образовать новую клетку! Вычитаемое - Ноль или Меньше ноля.")

    def __mul__(self, other):
        return Cell(self.points * other.points)

    def __floordiv__(self, other):
        try:
            return Cell(self.points // other.points)
        except ZeroDivisionError:
            # Клетка не может быть образована, поэтому нужно ввернуть None
            # Возвращаемый результат обязательно обрабатывать!
            print("Нельзя образовать новую клетку! Деление на ноль.")

    def make_order(self, raw=0):
        str_out = '*' * self.points
        return str_out.replace('*' * raw, '*' * raw + '\n', len(str_out) // raw) if raw > 0 else str_out


cell_1 = Cell(17)
cell_2 = Cell(10)
print('\nCELL_1:\n' + cell_1.make_order(4))
print('\nCELL_2:\n' + cell_2.make_order(3))
print('\nCELL_2:\n' + cell_2.make_order())
cell_3 = cell_1 + cell_2
print('\nCELL_3:\n' + cell_3.make_order(7))
cell_4 = Cell(0)
print('\nCELL_4:\n' + cell_4.make_order(7))
cell_5 = cell_3 // cell_4
print('\nCELL_5:\n' + cell_5.make_order()) if cell_5 is not None else print(
    '\nCELL_5: Не существует!\n')
cell_6 = cell_2 - cell_1
print('\nCELL_6:\n' + cell_6.make_order()) if cell_5 is not None else print(
    '\nCELL_6: Не существует!\n')
