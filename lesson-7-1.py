# УРОК 7. ЗАДАНИЕ 1

"""
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.

Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.

Примеры матриц вы найдете в методичке.

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.

Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.

Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
первым элементом первой строки второй матрицы и т.д.
"""

from random import randint
from pandas import DataFrame
from tabulate import tabulate


class Matrix:
    __mx = []

    def __init__(self, *args):
        # Принимаем в параметре '*args' данные для заполнения матрицы в виде списка списков:
        # [[A11, ..., A1j], ..., [Ai1, ..., Aij]], где i - номер строки, j - номер столбца

        # НИЖНИЙ предел диапазона чисел, ВЕРХНИЙ предел диапазона чисел, количество СТРОК, количество СТОЛБЦОВ
        # Заполняем матрицу с помощью псевдослучайного генератора целых чисел
        # self.__mx = [[randint(args[0], args[1]) for j in range(args[3])] for i in range(args[2])]
        self.__mx = args[0]

    def __call__(self, *args, **kwargs):
        return self.__mx[args[0]][args[1]]

    # Перегружаем метод __str__() для вывода матрицы в привычном виде
    def __str__(self):
        # return DataFrame(self.__mx).to_string()
        return tabulate(DataFrame(self.__mx), showindex=False)

    # Перегружаем метод __add__() для реализации сложения двух объектов-матриц
    def __add__(self, other):
        return Matrix(
            [[self.__mx[i][j] + other(i, j) for j in range(len(self.__mx[i]))] for i in range(len(self.__mx))])


# Создаём четыре матрицы 3x4 и заполняем их с помощью псевдослучайного генератора целых чисел в диапазоне [-100; 100]
mx_list = [Matrix([[randint(-100, 100) for j in range(4)] for i in range(3)]) for ind in range(4)]
print(mx_list)
for mx in mx_list:
    print(mx, "\n")
print("РЕЗУЛЬТАТ СЛОЖЕНИЯ МАТРИЦЫ 3 и 4:\n")
print(mx_list[2] + mx_list[3])
